// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String? @unique
  email         String?   @unique
  emailVerified Boolean?
  image         String?
  accounts      Account[]
  sessions      Session[]
  notes Note[]
  chats Chat[]
  files Document[]



  password String?

}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Note {
  id String @id @default(uuid())
  userId String
  title String?
  text String 
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Chat {
  id String @id @default(uuid())

  userId String

  context String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]
}


model Message {
  id Int @id @default(autoincrement())
  text String 
  mine Boolean @default(true)

  chatId String
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model Document {
  id String @id @default(uuid())

title String?
  text String 

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  userId String 

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}